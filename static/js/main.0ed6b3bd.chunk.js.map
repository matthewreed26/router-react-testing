{"version":3,"sources":["logo.svg","components/text-section/text-section.component.jsx","components/text-list/text-list.component.jsx","components/search-box/search-box.component.jsx","components/home-page/home-page.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextSection","props","text","name","withRouter","texts","history","onClick","console","log","map","pageText","key","id","SearchBox","placeholder","handleChange","type","onChange","HomePage","e","setState","searchField","target","value","state","pageTexts","handleClickGetLogApp","handleClickGetUndefined","bind","fetch","then","response","json","users","this","filteredTexts","filter","toLowerCase","includes","handleClickGetLog","to","push","location","pathname","match","url","Component","App","className","src","logo","alt","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,iPCE9BC,EAAc,SAAAC,GACvB,OAAO,kDAAqBA,EAAMC,KAAKC,QCU5BC,eATE,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvB,OAAO,6BACH,4BAAQC,QAAS,kBAAMC,QAAQC,IAAIH,KAAnC,kCACA,6BACKD,EAAMK,KAAI,SAAAC,GAAQ,OAAI,kBAAC,EAAD,CAAaC,IAAKD,EAASE,GAAIX,KAAMS,YCN3DG,EAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAO,2BAAOC,KAAK,SAASF,YAAaA,EAC/BG,SAAWF,K,OCwDVG,E,YAtDb,aAAe,IAAD,8BACZ,+CAgBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXC,UAAW,GACXJ,YAAa,IAGf,EAAKK,qBAAuB,EAAKC,wBAAwBC,KAA7B,gBARhB,E,iFAWO,IAAD,OAClBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAEK,UAAWQ,S,gDAQ9C1B,QAAQC,IAAI0B,Q,0CAIZ3B,QAAQC,IAAI,uB,+BAGJ,IAAD,SAC4B0B,KAAKV,MAAhCC,EADD,EACCA,UAAWJ,EADZ,EACYA,YACbc,EAAgBV,EAAUW,QAAO,SAAAnC,GAAI,OACzCA,EAAKC,KAAKmC,cAAcC,SAASjB,EAAYgB,kBAG/C,OACE,6BACE,kBAAC,EAAD,CAAWvB,YAAY,cAAcC,aAAemB,KAAKnB,eACzD,4BAAQT,QAAS4B,KAAKP,yBAAtB,iBACA,4BAAQrB,QAAS4B,KAAKK,mBAAtB,iBACA,4BAAQjC,QAAS4B,KAAKR,sBAAtB,WACA,kBAAC,EAAD,CAAUtB,MAAO+B,IACjB,kBAAC,IAAD,CAAMK,GAAG,UAAT,mBACA,4BAAQlC,QAAS,kBAAM,EAAKN,MAAMK,QAAQoC,KAAK,YAA/C,yBACA,8CACiBP,KAAKlC,MAAM0C,SAASC,SADrC,iBAEiBT,KAAKlC,MAAM4C,MAAMC,U,GA/CnBC,aCiBRC,MAhBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,SAASC,UAAWpC,IAChC,kBAAC,IAAD,CAAOmC,KAAK,kBAAkBC,UAAWpC,QCF/BqC,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASb,MACvB,2DCXNc,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.0ed6b3bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport const TextSection = props => {\n    return <div>{ `My name is ${props.text.name}` }</div>;\n};","import React from 'react';\nimport { TextSection } from '../text-section/text-section.component';\nimport { withRouter } from 'react-router-dom';\n\nconst TextList = ({ texts, history }) => {\n    return <div>\n        <button onClick={() => console.log(history)}>Log History from Sub Component</button>\n        <div>\n            {texts.map(pageText => <TextSection key={pageText.id} text={pageText}></TextSection>)}\n        </div>\n    </div>;\n};\n\nexport default withRouter(TextList);","import React from 'react';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return <input type='search' placeholder={placeholder} \n              onChange={ handleChange }></input>\n};","import React, { Component } from 'react';\nimport TextList from '../text-list/text-list.component';\nimport { SearchBox } from '../search-box/search-box.component';\nimport { Link } from 'react-router-dom';\n\nclass HomePage extends Component {\n  constructor() {\n    super();\n\n    this.state = { \n      pageTexts: [],\n      searchField: ''\n    }\n\n    this.handleClickGetLogApp = this.handleClickGetUndefined.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ pageTexts: users }))\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value })\n  };\n\n  handleClickGetUndefined() {\n    console.log(this);\n  }\n\n  handleClickGetLog() {\n    console.log(\"logging something\");\n  }\n\n  render() {\n    const { pageTexts, searchField } = this.state;\n    const filteredTexts = pageTexts.filter(text =>\n      text.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div>\n        <SearchBox placeholder='name search' handleChange={ this.handleChange }></SearchBox>\n        <button onClick={this.handleClickGetUndefined}>Log Undefined</button>\n        <button onClick={this.handleClickGetLog}>Log Something</button>\n        <button onClick={this.handleClickGetLogApp}>Log App</button>\n        <TextList texts={filteredTexts}></TextList>\n        <Link to='/other'>Route to /other</Link>\n        <button onClick={() => this.props.history.push('/other')}>Also Routes to /other</button>\n        <div>\n          Current path: {this.props.location.pathname}\n          Matched path: {this.props.match.url}\n          {/* test by navigating to /other/something */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport HomePage from './components/home-page/home-page.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Switch>{/* this matches to the first route below */}\n          <Route exact path='/' component={HomePage} />\n          <Route path='/other' component={HomePage} />\n          <Route path='/other/:otherId' component={HomePage} />\n          {/* :otherId matches dynamically and passes to HomePage props as props.match.params.otherId */}\n        </Switch>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}